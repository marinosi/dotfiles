start-server

# Global settings

# Set prefix to ^a (like screen)
# go to start of line will be C-a C-a
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# don't close windows. just deactivate them. use respawn-window to reactivate.
#setw -g remain-on-exit on

# scrollback buffer n lines
set -g history-limit 50000

# start window indexing at one (default = 0)
set -g base-index 0

# instructs tmux to expect UTF-8 sequences
setw -g utf8 on

# listen for activity on all windows
set -g bell-action any

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

set -g terminal-overrides "*88col*:colors=88,*256col*:colors=256,xterm*:colors=256"

# tell tmux to use 256 colour terminal
set -g default-terminal "screen-256color"

# xterm-style function key sequences
setw -g xterm-keys on

##################################################
# Key bindings
##################################################
# reload conf
# Reload the .tmux.conf file with Ctrl-r
bind-key l source-file ~/.tmux.conf \; display-message "Configuration reloaded"

# open a man page in new window
bind-key / command-prompt "split-window -h 'exec man %%'"

# quick view of processes
bind-key "~" split-window -h "exec top"

# log output
bind-key H pipe-pane 'cat >>$HOME/tmux-#W.log' \; display-message 'Started logging to $HOME/tmux-#W.log'
bind-key h pipe-pane \; display-message 'Ended logging to $HOME/tmux-#W.log'

# quit
bind-key \ confirm-before kill-server
bind-key q confirm-before kill-server

# displays
bind-key * list-clients

# redisplay (default key in tmux is 'r')
#bind-key C-l refresh-client
#bind-key l refresh-client
bind-key r refresh-client

# choose window/session
bind-key "'" choose-window
bind-key '"' choose-session

# function keys
bind-key -n F2 choose-session
bind-key -n F3 split-window -v
bind-key -n F4 kill-pane
bind-key -n F5 split-window -h
bind-key -n F6 select-pane -t :.+
bind-key -n F7 detach
bind-key -n F8 kill-window
bind-key -n F9 command-prompt "rename-window %%"
bind-key -n F10 previous-window
bind-key -n F11 next-window
bind-key -n F12 new-window
bind-key -nr C-n new-window

##################################################
## copy and paste
##################################################
## Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l zsh"

# vi-style controls for copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind-key [ copy-mode
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
#bind-key ] paste-buffer -s \015

# enable mouse selection in copy mode
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

# list all paste buffers (default key is '#')
bind-key b list-buffers

# choose buffer to paste interactively (default key was '=')
bind-key p choose-buffer

# delete the most recently copied buffer of text (default key was '-')
bind-key x delete-buffer

# scrolling with terminal scroll bar
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

##################################################

##################################################
## window
##################################################
#unbind %
#bind _ split-window -v
bind _ split-window -v -c "#{pane_current_path}"
#unbind '"'
#bind | split-window -h
bind | split-window -h -c "#{pane_current_path}"

# navigate windows using hl, and ctrl-hl (no prefix)
#bind-key -nr C-h select-window -t :-
#bind-key -nr C-l select-window -t :+

# Ctrl-Left/Right cycles thru windows (no prefix)
#bind-key -n "C-Left"  select-window -t :-
#bind-key -n "C-Right" select-window -t :+

# Shift-Left/Right cycles thru windows (no prefix)
bind-key -n "S-Left"  select-window -t :-
bind-key -n "S-Right" select-window -t :+

# Cycle to next window
bind-key -r Tab select-window -t :+

##################################################

##################################################
## pane
##################################################
# navigate panes using jk, and ctrl+jk (no prefix)
bind-key -r j select-pane -t :.-
bind-key -r k select-pane -t :.+
bind-key -nr C-j select-pane -t :.-
bind-key -nr C-k select-pane -t :.+

# Ctrl-Up/Down cyles thru panes (no prefix)
bind-key -n "C-Up"   select-pane -t :.-
bind-key -n "C-Down" select-pane -t :.+

# resize pane with arrow keys
# -r: can be repeated without pressing prefix
#     again (500ms after last '-r' action or prefix)
unbind Left
unbind Right
unbind Down
unbind Up
bind -r Left resize-pane -L 2
bind -r Right resize-pane -R 2
bind -r Down resize-pane -D 2
bind -r Up resize-pane -U 2

# swap panes
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

##################################################

set -g status-utf8 on
set -g status-justify centre

# amount of time for which status line messages and other indicators
# are displayed. time is in milliseconds.
set -g display-time 2000

# window title
# enable wm window titles
set-option -g set-titles on

# wm window title string (uses statusbar variables)
set-option -g set-titles-string '#S:#I.#P #W' # window number,program name,active (or not)

# control automatic window renaming
set-window-option -g automatic-rename on # auto name

# default statusbar colors
#set -g status-fg black
#set -g status-bg green
set -g status-fg colour136 #yellow
set -g status-bg colour235 #base02
set -g status-attr default

# default window title colors
#setw -g window-status-fg white
setw -g window-status-fg colour166 #orange
setw -g window-status-bg default
setw -g window-status-attr dim

# active window title colors
#set-window-option -g window-status-current-fg colour166 #orange
#set-window-option -g window-status-current-bg default
setw -g window-status-current-fg black
setw -g window-status-current-bg red
#setw -g window-status-current-attr bright
setw -g window-status-current-attr underscore

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright,blink

# clock
set-window-option -g clock-mode-colour cyan
set-window-option -g clock-mode-style 24

# Linux clipboard support
# move x clipboard into tmux paste buffer
# bind C-p run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"
# move tmux copy buffer into x clipboard
# bind C-y run "tmux save-buffer - | xclip -i -selection clipboard"

# Copy tmux paste buffer to CLIPBOARD
#bind-key -n C-c run "tmux save-buffer - | xsel --input --clipboard"
#bind-key -n C-c run "tmux save-buffer - | pbcopy"

# Paste CLIPBOARD to tmux paste buffer and paste tmux paste buffer
#bind-key -n C-v run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

# Toggle mouse on with ^a m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^a M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

unbind +
bind + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom
